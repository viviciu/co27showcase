{"ast":null,"code":"var _jsxFileName = \"/Users/vivianastaicu/Documents/GitHub/co27showcase/co27showcase/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport ForceGraph2D from 'react-force-graph-2d';\nimport ForceGraph3D from 'react-force-graph-3d';\nimport SpriteText from \"three-spritetext\";\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport data from \"./data.json\";\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('graph'));\nroot.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(ForceGraph2D, {\n    backgroundColor: \"#000003\",\n    graphData: data,\n    nodeLabel: node => `${node.description}` // SENIOR QUOTES\n    ,\n    linkColor: () => \"white\"\n    // PORTFOLIO LINKS\n    ,\n    onNodeClick: node => {\n      if (node.url) {\n        window.open(node.url, \"_blank\");\n      }\n    }\n    // FORCE -- failed\n    // d3Force=\"link\"\n    // d3AlphaDecay={0.05}\n    // d3VelocityDecay={0.2}\n    // d3ForceLink={(link) => {\n    //   link.distance = 30; // Adjust this value to make links shorter\n    // }}\n    // d3ForceCharge={(charge) => {\n    //   charge.strength = -50; // Adjust this value to make nodes attract each other more\n    // }}\n\n    // IMGS 2D\n    ,\n    nodeThreeObjectExtend: true,\n    nodeThreeObject: node => {\n      const group = new THREE.Group();\n\n      // Create image sprite\n      const imgTexture = new THREE.TextureLoader().load(node.img);\n      const material = new THREE.SpriteMaterial({\n        map: imgTexture\n      });\n      const sprite = new THREE.Sprite(material);\n      sprite.scale.set(12, 12);\n      group.add(sprite);\n\n      // Create text sprite\n      const textSprite = new SpriteText(node.name);\n      textSprite.color = \"#ffffff\";\n      textSprite.textHeight = 5;\n      textSprite.position.set(0, -15, 0); // Position text below the image\n      group.add(textSprite);\n\n      // Adjust the position of the sprite to be below the node\n      sprite.position.y -= 10; // Adjust this value as needed\n\n      // Check if bloom should be disabled for this node\n      if (node.group === \"TRACK\") {\n        // Change 'TRACK' to the specific group you want to turn off bloom\n        sprite.layers.disable(1); // Disable bloom layer\n      }\n      return group;\n    },\n    nodeCanvasObject: (node, ctx, globalScale) => {\n      const img = new Image();\n      img.src = node.img;\n      const size = 12 / globalScale; // Adjust the size as needed\n\n      img.onload = () => {\n        ctx.drawImage(img, node.x - size / 2, node.y - size / 2, size, size);\n      };\n      node.__bckgDimensions = [size, size]; // to re-use in nodePointerAreaPaint\n    },\n    nodePointerAreaPaint: (node, color, ctx) => {\n      ctx.fillStyle = color;\n      const bckgDimensions = node.__bckgDimensions;\n      bckgDimensions && ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);\n    }\n    // IMGS 3D\n    // nodeThreeObject={(node) => {\n    //   const group = new THREE.Group();\n\n    //   // Create image sprite\n    //   const imgTexture = new THREE.TextureLoader().load(node.img);\n    //   const material = new THREE.SpriteMaterial({ map: imgTexture });\n    //   const sprite = new THREE.Sprite(material);\n    //   sprite.scale.set(12, 12);\n    //   group.add(sprite);\n\n    //   // Create text sprite\n    //   const textSprite = new SpriteText(node.name);\n    //   textSprite.color = \"#ffffff\";\n    //   textSprite.textHeight = 5;\n    //   textSprite.position.set(0, -15, 0); // Position text below the image\n    //   group.add(textSprite);\n\n    //   return group;\n    // }}\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 17,\n  columnNumber: 3\n}, this));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","ForceGraph2D","ForceGraph3D","SpriteText","reportWebVitals","data","THREE","jsxDEV","_jsxDEV","root","createRoot","document","getElementById","render","StrictMode","children","backgroundColor","graphData","nodeLabel","node","description","linkColor","onNodeClick","url","window","open","nodeThreeObjectExtend","nodeThreeObject","group","Group","imgTexture","TextureLoader","load","img","material","SpriteMaterial","map","sprite","Sprite","scale","set","add","textSprite","name","color","textHeight","position","y","layers","disable","nodeCanvasObject","ctx","globalScale","Image","src","size","onload","drawImage","x","__bckgDimensions","nodePointerAreaPaint","fillStyle","bckgDimensions","fillRect","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/vivianastaicu/Documents/GitHub/co27showcase/co27showcase/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport ForceGraph2D from 'react-force-graph-2d'\nimport ForceGraph3D from 'react-force-graph-3d'\nimport SpriteText from \"three-spritetext\";\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport data from \"./data.json\";\nimport * as THREE from 'three';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('graph'));\n\n\n\nroot.render(\n  <React.StrictMode>\n    <ForceGraph2D\n      backgroundColor=\"#000003\"\n      graphData={data}\n      nodeLabel={(node) => `${node.description}`} // SENIOR QUOTES\n      linkColor={() => \"white\"}\n      // PORTFOLIO LINKS\n      onNodeClick={(node) => {\n        if (node.url) {\n          window.open(node.url, \"_blank\");\n        }\n      }}\n      // FORCE -- failed\n      // d3Force=\"link\"\n      // d3AlphaDecay={0.05}\n      // d3VelocityDecay={0.2}\n      // d3ForceLink={(link) => {\n      //   link.distance = 30; // Adjust this value to make links shorter\n      // }}\n      // d3ForceCharge={(charge) => {\n      //   charge.strength = -50; // Adjust this value to make nodes attract each other more\n      // }}\n\n      // IMGS 2D\n      nodeThreeObjectExtend={true}\n      nodeThreeObject={(node) => {\n        const group = new THREE.Group();\n\n        // Create image sprite\n        const imgTexture = new THREE.TextureLoader().load(node.img);\n        const material = new THREE.SpriteMaterial({ map: imgTexture });\n        const sprite = new THREE.Sprite(material);\n        sprite.scale.set(12, 12);\n        group.add(sprite);\n\n        // Create text sprite\n        const textSprite = new SpriteText(node.name);\n        textSprite.color = \"#ffffff\";\n        textSprite.textHeight = 5;\n        textSprite.position.set(0, -15, 0); // Position text below the image\n        group.add(textSprite);\n\n        // Adjust the position of the sprite to be below the node\n        sprite.position.y -= 10; // Adjust this value as needed\n\n        // Check if bloom should be disabled for this node\n        if (node.group === \"TRACK\") {\n          // Change 'TRACK' to the specific group you want to turn off bloom\n          sprite.layers.disable(1); // Disable bloom layer\n        }\n\n        return group;\n      }}\n      nodeCanvasObject={(node, ctx, globalScale) => {\n        const img = new Image();\n        img.src = node.img;\n        const size = 12 / globalScale; // Adjust the size as needed\n\n        img.onload = () => {\n          ctx.drawImage(img, node.x - size / 2, node.y - size / 2, size, size);\n        };\n\n        node.__bckgDimensions = [size, size]; // to re-use in nodePointerAreaPaint\n      }}\n      nodePointerAreaPaint={(node, color, ctx) => {\n        ctx.fillStyle = color;\n        const bckgDimensions = node.__bckgDimensions;\n        bckgDimensions &&\n          ctx.fillRect(\n            node.x - bckgDimensions[0] / 2,\n            node.y - bckgDimensions[1] / 2,\n            ...bckgDimensions\n          );\n      }}\n      // IMGS 3D\n      // nodeThreeObject={(node) => {\n      //   const group = new THREE.Group();\n\n      //   // Create image sprite\n      //   const imgTexture = new THREE.TextureLoader().load(node.img);\n      //   const material = new THREE.SpriteMaterial({ map: imgTexture });\n      //   const sprite = new THREE.Sprite(material);\n      //   sprite.scale.set(12, 12);\n      //   group.add(sprite);\n\n      //   // Create text sprite\n      //   const textSprite = new SpriteText(node.name);\n      //   textSprite.color = \"#ffffff\";\n      //   textSprite.textHeight = 5;\n      //   textSprite.position.set(0, -15, 0); // Position text below the image\n      //   group.add(textSprite);\n\n      //   return group;\n      // }}\n    />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}