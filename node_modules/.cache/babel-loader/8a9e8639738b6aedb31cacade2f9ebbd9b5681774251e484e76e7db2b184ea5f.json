{"ast":null,"code":"var _jsxFileName = \"/Users/vivianastaicu/Documents/GitHub/co27showcase/co27showcase/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { useRef, useEffect } from 'react';\nimport ForceGraph3D from 'react-force-graph-3d';\nimport SpriteText from \"three-spritetext\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport data from \"./data.json\";\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('graph'));\nconst FocusGraph = () => {};\n_c = FocusGraph;\nconst fgRef = useRef();\nuseEffect(() => {\n  const bloomPass = new UnrealBloomPass();\n  bloomPass.strength = 4;\n  bloomPass.radius = 1;\n  bloomPass.threshold = 0;\n  fgRef.current.postProcessingComposer().addPass(bloomPass);\n}, []);\nroot.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ForceGraph3D, {\n      ref: fgRef,\n      backgroundColor: \"#000003\",\n      graphData: data,\n      nodeAutoColorBy: \"group\"\n      // nodeThreeObject={(node) => {\n      //   const sprite = new SpriteText(node.id);\n      //   sprite.color = node.color;\n      //   sprite.textHeight = 8;\n      //   return sprite;\n      // }}\n      ,\n\n      nodeLabel: node => `${node.description}` // SENIOR QUOTES\n      ,\n      nodeThreeObjectExtend: true\n      // nodeThreeObject={(node) => {\n      //   // extend link with text sprite\n      //   const sprite = new SpriteText(`${node.id}`);\n      //   sprite.color = \"lightgrey\";\n      //   sprite.textHeight = 5;\n      //   // Adjust the position of the sprite to be below the node\n      //   sprite.position.y -= 10; // Adjust this value as needed\n      //   return sprite;\n      // }}\n      ,\n      nodeThreeObject: node => {\n        const imgTexture = new THREE.TextureLoader().load(node.img);\n        console.log(node.img);\n        imgTexture.colorSpace = THREE.SRGBColorSpace;\n        const material = new THREE.SpriteMaterial({\n          map: imgTexture\n        });\n        const sprite = new THREE.Sprite(material);\n        sprite.scale.set(12, 12);\n        return sprite;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 28,\n  columnNumber: 3\n}, this));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nvar _c;\n$RefreshReg$(_c, \"FocusGraph\");","map":{"version":3,"names":["React","ReactDOM","useRef","useEffect","ForceGraph3D","SpriteText","App","reportWebVitals","data","THREE","jsxDEV","_jsxDEV","Fragment","_Fragment","root","createRoot","document","getElementById","FocusGraph","_c","fgRef","bloomPass","UnrealBloomPass","strength","radius","threshold","current","postProcessingComposer","addPass","render","StrictMode","children","ref","backgroundColor","graphData","nodeAutoColorBy","nodeLabel","node","description","nodeThreeObjectExtend","nodeThreeObject","imgTexture","TextureLoader","load","img","console","log","colorSpace","SRGBColorSpace","material","SpriteMaterial","map","sprite","Sprite","scale","set","fileName","_jsxFileName","lineNumber","columnNumber","$RefreshReg$"],"sources":["/Users/vivianastaicu/Documents/GitHub/co27showcase/co27showcase/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { useRef, useEffect } from 'react';\nimport ForceGraph3D from 'react-force-graph-3d'\nimport SpriteText from \"three-spritetext\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport data from \"./data.json\";\nimport * as THREE from 'three';\n\nconst root = ReactDOM.createRoot(document.getElementById('graph'));\n\nconst FocusGraph = () => {\n  \n};\nconst fgRef = useRef();\n\nuseEffect(() => {\n  const bloomPass = new UnrealBloomPass();\n  bloomPass.strength = 4;\n  bloomPass.radius = 1;\n  bloomPass.threshold = 0;\n  fgRef.current.postProcessingComposer().addPass(bloomPass);\n}, []);\n\nroot.render(\n  <React.StrictMode>\n    <>\n      \n      <ForceGraph3D\n        ref={fgRef}\n        backgroundColor=\"#000003\"\n        graphData={data}\n        nodeAutoColorBy=\"group\"\n        // nodeThreeObject={(node) => {\n        //   const sprite = new SpriteText(node.id);\n        //   sprite.color = node.color;\n        //   sprite.textHeight = 8;\n        //   return sprite;\n        // }}\n\n        nodeLabel={(node) => `${node.description}`} // SENIOR QUOTES\n        nodeThreeObjectExtend={true}\n        // nodeThreeObject={(node) => {\n        //   // extend link with text sprite\n        //   const sprite = new SpriteText(`${node.id}`);\n        //   sprite.color = \"lightgrey\";\n        //   sprite.textHeight = 5;\n        //   // Adjust the position of the sprite to be below the node\n        //   sprite.position.y -= 10; // Adjust this value as needed\n        //   return sprite;\n        // }}\n        nodeThreeObject={(node) => {\n          const imgTexture = new THREE.TextureLoader().load(node.img);\n          console.log(node.img);\n          imgTexture.colorSpace = THREE.SRGBColorSpace;\n          const material = new THREE.SpriteMaterial({ map: imgTexture });\n          const sprite = new THREE.Sprite(material);\n          sprite.scale.set(12, 12);\n\n          return sprite;\n        }}\n      />\n    </>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,SAASC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AACzC,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,OAAOC,UAAU,MAAM,kBAAkB;AACzC,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,IAAI,MAAM,aAAa;AAC9B,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE/B,MAAMC,IAAI,GAAGb,QAAQ,CAACc,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC,CAAC;AAElE,MAAMC,UAAU,GAAGA,CAAA,KAAM,CAEzB,CAAC;AAACC,EAAA,GAFID,UAAU;AAGhB,MAAME,KAAK,GAAGlB,MAAM,CAAC,CAAC;AAEtBC,SAAS,CAAC,MAAM;EACd,MAAMkB,SAAS,GAAG,IAAIC,eAAe,CAAC,CAAC;EACvCD,SAAS,CAACE,QAAQ,GAAG,CAAC;EACtBF,SAAS,CAACG,MAAM,GAAG,CAAC;EACpBH,SAAS,CAACI,SAAS,GAAG,CAAC;EACvBL,KAAK,CAACM,OAAO,CAACC,sBAAsB,CAAC,CAAC,CAACC,OAAO,CAACP,SAAS,CAAC;AAC3D,CAAC,EAAE,EAAE,CAAC;AAENP,IAAI,CAACe,MAAM,cACTlB,OAAA,CAACX,KAAK,CAAC8B,UAAU;EAAAC,QAAA,eACfpB,OAAA,CAAAE,SAAA;IAAAkB,QAAA,eAEEpB,OAAA,CAACP,YAAY;MACX4B,GAAG,EAAEZ,KAAM;MACXa,eAAe,EAAC,SAAS;MACzBC,SAAS,EAAE1B,IAAK;MAChB2B,eAAe,EAAC;MAChB;MACA;MACA;MACA;MACA;MACA;MAAA;;MAEAC,SAAS,EAAGC,IAAI,IAAK,GAAGA,IAAI,CAACC,WAAW,EAAG,CAAC;MAAA;MAC5CC,qBAAqB,EAAE;MACvB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAAA;MACAC,eAAe,EAAGH,IAAI,IAAK;QACzB,MAAMI,UAAU,GAAG,IAAIhC,KAAK,CAACiC,aAAa,CAAC,CAAC,CAACC,IAAI,CAACN,IAAI,CAACO,GAAG,CAAC;QAC3DC,OAAO,CAACC,GAAG,CAACT,IAAI,CAACO,GAAG,CAAC;QACrBH,UAAU,CAACM,UAAU,GAAGtC,KAAK,CAACuC,cAAc;QAC5C,MAAMC,QAAQ,GAAG,IAAIxC,KAAK,CAACyC,cAAc,CAAC;UAAEC,GAAG,EAAEV;QAAW,CAAC,CAAC;QAC9D,MAAMW,MAAM,GAAG,IAAI3C,KAAK,CAAC4C,MAAM,CAACJ,QAAQ,CAAC;QACzCG,MAAM,CAACE,KAAK,CAACC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;QAExB,OAAOH,MAAM;MACf;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC,gBACF;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACa,CACpB,CAAC;;AAED;AACA;AACA;AACApD,eAAe,CAAC,CAAC;AAAC,IAAAY,EAAA;AAAAyC,YAAA,CAAAzC,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}