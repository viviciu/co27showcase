{"ast":null,"code":"var _jsxFileName = \"/Users/vivianastaicu/Documents/GitHub/co27showcase/co27showcase/src/index.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport ForceGraph3D from \"react-force-graph-3d\";\nimport SpriteText from \"three-spritetext\";\nimport \"./index.css\";\nimport { useRef, useEffect } from \"react\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport data from \"./data.json\";\nimport * as THREE from \"three\";\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById(\"graph\"));\nconst FocusGraph = () => {\n  _s();\n  const fgRef = useRef();\n  useEffect(() => {\n    if (fgRef.current) {\n      const bloomPass = new UnrealBloomPass();\n      bloomPass.strength = 0.5;\n      bloomPass.radius = 1;\n      bloomPass.threshold = 0;\n      fgRef.current.postProcessingComposer().addPass(bloomPass);\n\n      // Access and manipulate nodes to turn off bloom for specific group\n      const nodes = fgRef.current.graphData().nodes;\n      nodes.forEach(node => {\n        if (node.group === \"TRACK\") {\n          node.__bloom = false; // Custom property to indicate bloom should be off\n        }\n      });\n      fgRef.current.refresh();\n    }\n  }, [fgRef]);\n\n  // Define a color mapping for groups\n  const groupColors = {\n    P: \"#ff0000\",\n    // Red\n    C: \"#00ff00\",\n    // Green\n    E: \"#0000ff\" // Blue\n  };\n  return /*#__PURE__*/_jsxDEV(ForceGraph3D, {\n    ref: fgRef,\n    backgroundColor: \"#000003\",\n    graphData: data,\n    nodeAutoColorBy: \"group\",\n    nodeColor: node => groupColors[node.group] || \"#ffffff\" // Default to white if group not found\n    ,\n    nodeLabel: node => `${node.description}` // SENIOR QUOTES\n    ,\n    nodeThreeObjectExtend: true,\n    nodeThreeObject: node => {\n      const group = new THREE.Group();\n\n      // Create image sprite\n      const imgTexture = new THREE.TextureLoader().load(node.img);\n      const material = new THREE.SpriteMaterial({\n        map: imgTexture\n      });\n      const sprite = new THREE.Sprite(material);\n      sprite.scale.set(12, 12);\n      group.add(sprite);\n\n      // Create text sprite\n      const textSprite = new SpriteText(node.name);\n      textSprite.color = \"#ffffff\";\n      textSprite.textHeight = 5;\n      textSprite.position.set(0, -15, 0); // Position text below the image\n      group.add(textSprite);\n\n      // Adjust the position of the sprite to be below the node\n      sprite.position.y -= 10; // Adjust this value as needed\n\n      // Check if bloom should be disabled for this node\n      if (node.group === \"TRACK\") {\n        // Change 'TRACK' to the specific group you want to turn off bloom\n        sprite.layers.disable(1); // Disable bloom layer\n      }\n      return group;\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(FocusGraph, \"2XlglJ1zstaR1WtRee3GT+PYUlE=\");\n_c = FocusGraph;\nroot.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(FocusGraph, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 86,\n  columnNumber: 3\n}, this));\nreportWebVitals();\nvar _c;\n$RefreshReg$(_c, \"FocusGraph\");","map":{"version":3,"names":["React","ReactDOM","ForceGraph3D","SpriteText","useRef","useEffect","App","reportWebVitals","data","THREE","UnrealBloomPass","jsxDEV","_jsxDEV","root","createRoot","document","getElementById","FocusGraph","_s","fgRef","current","bloomPass","strength","radius","threshold","postProcessingComposer","addPass","nodes","graphData","forEach","node","group","__bloom","refresh","groupColors","P","C","E","ref","backgroundColor","nodeAutoColorBy","nodeColor","nodeLabel","description","nodeThreeObjectExtend","nodeThreeObject","Group","imgTexture","TextureLoader","load","img","material","SpriteMaterial","map","sprite","Sprite","scale","set","add","textSprite","name","color","textHeight","position","y","layers","disable","fileName","_jsxFileName","lineNumber","columnNumber","_c","render","StrictMode","children","$RefreshReg$"],"sources":["/Users/vivianastaicu/Documents/GitHub/co27showcase/co27showcase/src/index.js"],"sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport ForceGraph3D from \"react-force-graph-3d\";\nimport SpriteText from \"three-spritetext\";\nimport \"./index.css\";\nimport { useRef, useEffect } from \"react\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport data from \"./data.json\";\nimport * as THREE from \"three\";\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"graph\"));\n\nconst FocusGraph = () => {\n  const fgRef = useRef();\n\n  useEffect(() => {\n    if (fgRef.current) {\n      const bloomPass = new UnrealBloomPass();\n      bloomPass.strength = 0.5;\n      bloomPass.radius = 1;\n      bloomPass.threshold = 0;\n      fgRef.current.postProcessingComposer().addPass(bloomPass);\n\n      // Access and manipulate nodes to turn off bloom for specific group\n      const nodes = fgRef.current.graphData().nodes;\n      nodes.forEach((node) => {\n        if (node.group === \"TRACK\") {\n          node.__bloom = false; // Custom property to indicate bloom should be off\n        }\n      });\n      fgRef.current.refresh();\n    }\n  }, [fgRef]);\n\n  // Define a color mapping for groups\n  const groupColors = {\n    P: \"#ff0000\", // Red\n    C: \"#00ff00\", // Green\n    E: \"#0000ff\", // Blue\n  };\n\n  return (\n    <ForceGraph3D\n      ref={fgRef}\n      backgroundColor=\"#000003\"\n      graphData={data}\n      nodeAutoColorBy=\"group\"\n      nodeColor={(node) => groupColors[node.group] || \"#ffffff\"} // Default to white if group not found\n      nodeLabel={(node) => `${node.description}`} // SENIOR QUOTES\n      nodeThreeObjectExtend={true}\n      nodeThreeObject={(node) => {\n        const group = new THREE.Group();\n\n        // Create image sprite\n        const imgTexture = new THREE.TextureLoader().load(node.img);\n        const material = new THREE.SpriteMaterial({ map: imgTexture });\n        const sprite = new THREE.Sprite(material);\n        sprite.scale.set(12, 12);\n        group.add(sprite);\n\n        // Create text sprite\n        const textSprite = new SpriteText(node.name);\n        textSprite.color = \"#ffffff\";\n        textSprite.textHeight = 5;\n        textSprite.position.set(0, -15, 0); // Position text below the image\n        group.add(textSprite);\n\n        // Adjust the position of the sprite to be below the node\n        sprite.position.y -= 10; // Adjust this value as needed\n\n        // Check if bloom should be disabled for this node\n        if (node.group === \"TRACK\") {\n          // Change 'TRACK' to the specific group you want to turn off bloom\n          sprite.layers.disable(1); // Disable bloom layer\n        }\n\n        return group;\n      }}\n    />\n  );\n};\n\nroot.render(\n  <React.StrictMode>\n    <FocusGraph />\n  </React.StrictMode>\n);\n\nreportWebVitals();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}